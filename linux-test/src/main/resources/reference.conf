akka {

  test {
    ##  duration to wait in expectMsg in akka test
    single-expect-default = 10s
  }

  daemonic = on

  extensions = [
    "io.gearpump.transport.Express$",
    "io.gearpump.metrics.Metrics$"
  ]
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = off
  log-dead-letters-during-shutdown = off
  actor {
    provider = "akka.remote.RemoteActorRefProvider"
    default-mailbox {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
    }
    default-dispatcher {
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      throughput = 10
      fork-join-executor {
        parallelism-factor = 2
        parallelism-max = 4
        parallelism-min = 4
      }
    }
    kryo {
      buffer-size = 4096
      classes = [
      ]

      compression = off
      idstrategy = "incremental"
      implicit-registration-logging = true
      kryo-reference-map = true
      kryo-trace = false
      mappings {
      }
      max-buffer-size = -1
      serializer-pool-size = 16
      type = "graph"
      use-manifests = false
    }
  }
  remote {
    log-remote-lifecycle-events = off
    use-dispatcher = "akka.remote.default-remote-dispatcher"
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
      send-buffer-size = 4096000b
      receive-buffer-size = 4096000b
      maximum-frame-size = 2048000b
    }
    default-remote-dispatcher {
      throughput = 5
      type = Dispatcher
      mailbox-type = "akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      executor = "fork-join-executor"
    }
  }
}